dat.test = dat[!trainIdx,]
dat = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
view(dat$rotation)
colnames(dat$rotation)
rownames(dat$rotation)
# dat = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>%
#   prcomp(scale. = T)
dat = dat_cor$level1 %>% select(c(CSF,Myelencephalon)) %>% acomp() %>%
prcomp(scale. = T)
view(dat)
view(dat$rotation)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
view(dat)
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
# multinomial regression
multinomModel = train(Age~.,data = dat.train,
method = "multinom")
# multinomial.predicted_score = predict (multinomModel, dat.test, "prob")
dat.prediction = predict(multinomModel, dat.test)
print(paste('Accuracy',table(dat.prediction == dat.test$Age)["TRUE"]/length(dat.test$Age)))
# [1] "Accuracy 0.460714285714286"
if(F){
multinomModel = train(Age~PC1 + PC2,data = dat.train,
method = "multinom")
dat.predicted_score = predict (multinomModel, dat.test, "prob")
dat.prediction = predict(multinomModel, dat.test)
results = data.frame(test = dat.test$Age, pred = dat.prediction)
print(paste('Accuracy',table(results$test == results$pred)["TRUE"]/length(results$test)))
}
# [1] "Accuracy 0.460714285714286"
view(dat.train)
# split dataset
library(caret)
set.seed(100)
# a = data.frame(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),Age = dat_cor$level1$Age)
# dat.train = a[trainIdx,]
# dat.test = a[!trainIdx,]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
view(dat.train)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
# split dataset
library(caret)
set.seed(100)
# a = data.frame(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),Age = dat_cor$level1$Age)
# dat.train = a[trainIdx,]
# dat.test = a[!trainIdx,]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
view(dat.train)
contrasts(dat$Age)
view(dat)
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
view(dat$rotation)
library(plotly)
ggplot(as.data.frame(dat$rotation),aes(x=PC1,y=PC2))+
geom_point()+labs(title = 'pca')
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
ggplot(as.data.frame(dat),aes(x=PC1,y=PC2))+
geom_point()+labs(title = 'pca')
# split dataset
library(caret)
set.seed(100)
# a = data.frame(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),Age = dat_cor$level1$Age)
# dat.train = a[trainIdx,]
# dat.test = a[!trainIdx,]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+
geom_point()+labs(title = 'pca')
ggplot(as.data.frame(dat),aes(x=PC1,y=PC2))+
geom_point()+labs(title = 'pca')
view(at)
view(dat)
autoplot(fanny(dat[-9], 3), frame = TRUE)
library(ggfortify)
autoplot(fanny(dat[-9], 3), frame = TRUE)
library(cluster)
autoplot(fanny(dat[-9], 3), frame = TRUE)
autoplot(fanny(dat[-9], 4), frame = TRUE)
autoplot(fanny(dat[-9], 3), frame = TRUE)
view(dat)
view(dat_cor$level1)
view(data.frame(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),Age = dat_cor$level1$Age))
view(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp())
write.csv(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),file = "dat.txt")
write.csv(t(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp()),file = "dat.txt")
getwd()
cd()
cd
mv
setwd
setwd("C:/Users/lcqi/OneDrive/Desktop")
vignette(prcomp)
?prcomp
??prcomp
vignette(h2o)
library(MRIcloudT1volumetrics)
?vignette
vignette(MRIcloudT1volumetrics)
vignette(p = MRIcloudT1volumetrics)
vignette("package" = MRIcloudT1volumetrics)
vignette(package = MRIcloudT1volumetrics)
vignette(package = 'MRIcloudT1volumetrics')
?coef
knitr::opts_chunk$set(message = F)
rm(list = ls())
load('dat.Rdata')
setwd("C:/Users/lcqi/OneDrive/Desktop/bcaffo/data_analysis_mri/data_analysis_project")
load('dat.Rdata')
library(compositions)
library(factoextra)
library(data.table)
view(dat)
rm(list = ls())
#compositional data analysis across age
rm(list = ls())
load('dat.Rdata')
library(compositions)
library(factoextra)
library(data.table)
#data processing
library(tidyverse)
ref = read.csv(paste0(getwd(),'/unrestricted_bcaffo_12_12_2017_12_17_8.csv%3B.csv'), header = T)
colnames(ref)[1] = 'rawid'
#combine with patient info
dat_cor = list()
for(i in 1:4){
dat_cor[[paste0('level',i)]] = left_join(dat[[paste0('level',i)]], ref[,c('rawid','Age','Gender')], by="rawid")
}
#across age
Age = as.character(unique(dat_cor$level1$Age))
Age = sort(Age[!is.na(Age)])
dat_age = list()
for (i in Age){
a = dat_cor$level1 %>% filter(Age == i)
dat_age[[i]] =  a[, !colnames(a) %in% c('rawid','Age','Gender')]
}
res.rotations = list()
for (i in names(dat_age)){
#compositional data
cdata = acomp(dat_age[[i]])
#pca
cdata.pca = prcomp(cdata,scale. = T)
dat_visualization = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','Comp','value')
res.rotations[[i]] = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt() %>% filter(Var2 == 'PC1')
colnames(res.rotations[[i]]) = c('roi','PC','value')
print(
fviz_eig(cdata.pca)
)
print(
ggplot(dat_visualization, aes(x = as.factor(Comp),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'Comp', title = paste('compositional PCA across age',i))
)
}
res.rotations$compile = c()
for (i in names(dat_age)){
res.rotations$compile = rbind(res.rotations$compile, select(res.rotations[[i]],c(roi,value)) %>% mutate(Age = i))
}
ggplot(res.rotations$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC1')
view(dat_age)
#PCA after getting rid of CSF
library(compositions)
library(factoextra)
dat_age_noCSF = list()
#compositional analysis
for(i in Age){
dat_age_noCSF[[i]] = dat_age[[i]] %>%
select(-CSF) %>% acomp()
}
res.pca = list()
res.rotations_noCSF = list()
PC = c("PC1","PC2","PC3")
for(j in PC){
for(i in Age){
res.pca[[i]] = prcomp(dat_age_noCSF[[i]],scale. = T)
dat_visualization = prop.table(abs(res.pca[[i]]$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','PC','value')
#further work on PC1
res.rotations_noCSF[[i]] = dat_visualization %>% filter(PC == j)
}
res.rotations_noCSF$compile = c()
for (i in Age){
res.rotations_noCSF$compile = rbind(res.rotations_noCSF$compile,
select(res.rotations_noCSF[[i]],c(roi,value))
%>% mutate(Age = i))
}
print(
ggplot(res.rotations_noCSF$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = paste('Compositional analysis: weight of roi in',j))
)
}
rm(PC)
# split dataset
library(caret)
set.seed(100)
# a = data.frame(dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp(),Age = dat_cor$level1$Age)
# dat.train = a[trainIdx,]
# dat.test = a[!trainIdx,]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
print(fviz_eig(dat))
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
ggplot(as.data.frame(dat),aes(x=PC1,y=PC2))+
geom_point()+labs(title = 'pca')
save(dat,file = 'regression.Rdata')
rm(list = ls())
load('regression.Rdata')
#compositional data analysis across age
rm(list = ls())
load('dat.Rdata')
library(compositions)
library(factoextra)
library(data.table)
#data processing
library(tidyverse)
ref = read.csv(paste0(getwd(),'/unrestricted_bcaffo_12_12_2017_12_17_8.csv%3B.csv'), header = T)
colnames(ref)[1] = 'rawid'
#combine with patient info
dat_cor = list()
for(i in 1:4){
dat_cor[[paste0('level',i)]] = left_join(dat[[paste0('level',i)]], ref[,c('rawid','Age','Gender')], by="rawid")
}
#across age
Age = as.character(unique(dat_cor$level1$Age))
Age = sort(Age[!is.na(Age)])
dat_age = list()
for (i in Age){
a = dat_cor$level1 %>% filter(Age == i)
dat_age[[i]] =  a[, !colnames(a) %in% c('rawid','Age','Gender')]
}
res.rotations = list()
for (i in names(dat_age)){
#compositional data
cdata = acomp(dat_age[[i]])
#pca
cdata.pca = prcomp(cdata,scale. = T)
dat_visualization = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','Comp','value')
res.rotations[[i]] = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt() %>% filter(Var2 == 'PC1')
colnames(res.rotations[[i]]) = c('roi','PC','value')
print(
fviz_eig(cdata.pca)
)
print(
ggplot(dat_visualization, aes(x = as.factor(Comp),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'Comp', title = paste('compositional PCA across age',i))
)
}
res.rotations$compile = c()
for (i in names(dat_age)){
res.rotations$compile = rbind(res.rotations$compile, select(res.rotations[[i]],c(roi,value)) %>% mutate(Age = i))
}
ggplot(res.rotations$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC1')
view(dat_cor$level1)
save(dat_cor,'dat_cor.Rdata')
save(dat_cor,file = 'dat_cor.Rdata')
rm(list = ls())
rm(list = ls())
load('dat_cor.Rdata')
library(compositions)
library(factoextra)
library(data.table)
library(tidyverse)
library(caret)
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat = dat_cor$level1 %>% select(-c(rawid,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
dat = as.data.frame(dat$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
dat.train = dat[trainIdx,]
dat.test = dat[!trainIdx,]
# multinomial regression
multinomModel = train(Age~.,data = dat.train,
method = "multinom")
# multinomial.predicted_score = predict (multinomModel, dat.test, "prob")
dat.prediction = predict(multinomModel, dat.test)
print(paste('Accuracy',table(dat.prediction == dat.test$Age)["TRUE"]/length(dat.test$Age)))
# [1] "Accuracy 0.460714285714286"
?train
?train
# multinomial regression
multinomModel = train(Age~.,data = dat.train,
method = "multinom",trace = F )
# multinomial.predicted_score = predict (multinomModel, dat.test, "prob")
dat.prediction = predict(multinomModel, dat.test)
print(paste('Accuracy',table(dat.prediction == dat.test$Age)["TRUE"]/length(dat.test$Age)))
# [1] "Accuracy 0.453571428571429"
# SVM
svmModel = train(Age~.,data = dat.train,
method = "svmLinear",trace = F)
# SVM
svmModel = train(Age~.,data = dat.train,
method = "svmLinear",trace = F)
dat.prediction = predict(svmModel,dat.test)
table(dat.prediction,dat.test$Age)
print(paste('Accuracy',table(dat.prediction == dat.test$Age)["TRUE"]/length(dat.test$Age)))
neuralModel = train(Age~.,data = dat.train,
method = "mlp",trace = F)
neuralModel = train(Age~.,data = dat.train,
method = "mlp",trace = F)
dat.prediction = predict(neuralModel,dat.test)
print(paste('Accuracy',table(dat.prediction == dat.test$Age)["TRUE"]/length(dat.test$Age)))
head(dat)
knitr::opts_chunk$set(message = FALSE)
rm(list = ls())
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = paste0(getwd(),'/data')
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
dat = list()
for (i in 1:length(fileList)){
fullPath = paste(roiDir, fileList[i], sep = "/")
raw_dat = readSubject(fullPath)
dat_type1 = raw_dat %>% subject2df() %>% filter(type ==1) %>% fixBasalForebrain()
# unique(dat_type1$level
for (j in 1:4){
dat_each = dat_type1 %>% filter(level == j) %>% select(rawid,roi,volume) %>% spread(roi,volume)
dat[[paste0('level',j)]] = rbind(dat[[paste0('level',j)]],dat_each)
}
# dat_each = raw_dat %>% filter(type == 1, level == 1) %>% select(roi,volume) %>% spread(roi,volume)
# dat = rbind(dat,dat_each)
}
#extract rawid (integer)
for (j in 1:4){
id = dat[[paste0('level',j)]]$rawid
dat[[paste0('level',j)]]$rawid = as.numeric(sapply(strsplit(id,"_"),function(x) x[1]))
}
save(dat,file = 'dat.Rdata')
rm(list = ls())
knitr::opts_chunk$set(message = FALSE)
load('dat.Rdata')
paste0(getwd(),'/unrestricted_bcaffo_12_12_2017_12_17_8.csv%3B.csv')
?acomp
??acomp
a = matrix(c(1:10),nrow = 5,byrow = T)
a
sapply(a, mean)
sapply(a, function(i){return(i)})
sapply(a, function(i){return(i[1])})
sapply(a, function(i){return(i+1)})
sapply(a, function(i){return(i)})
lapply(a, function(i) return(i))
apply(a,1, function(i) return(i))
apply(a,1, function(i) sum(i))
a
apply(a,1, function(i) isum(i))
apply(a,1, function(i) i/sum(i))
t(apply(a,1, function(i) i/sum(i)))
lapply(a, function(i){return(i)})
a
sapply(a, function(i){return(i)})
sapply(a.t, function(i){return(i)})
sapply(a.t(), function(i){return(i)})
sapply(t(a), function(i){return(i)})
lapply(t(a), function(i){return(i)})
lapply(t(a), function(i){print(i)})
lapply(t(a), function(i){return(i)})
apply(t(a), function(i){return(i)})
apply(t(a), function(i)return(i))
apply(t(a), function(i) return(i))
apply(t(a), function(i){ return(i) })
apply(a,function(i){ return(i) })
apply(a,1,function(i){ return(i) })
apply(a,1,function(i){ return(i[1]) })
apply(a,1,function(i){ return(i[-1]) })
apply(a,1,function(i){ return(i[3]) })
apply(a,1,function(i){ return(i[1][1]) })
apply(a,1,function(i){ i })
apply(a,1,function(i){ i[1] })
apply(a,1,function(i){ i[1][1] })
apply(a,1,function(i){ prcomp[i]})
apply(a,1,function(i){ prcomp(i)})
apply(a,2,function(i){ prcomp(i)})
lapply(a,function(i){ prcomp(i)})
sapply(a,function(i){ prcomp(i)})
view(dat)
medical.example <-
data.frame(patient = 1:100,
age = rnorm(100, mean = 60, sd = 12),
treatment = gl(2, 50,
labels = c("Treatment", "Control")))
View(medical.example)
tapply(medical.example$age, medical.example$treatment, mean)
class(medical.example$patient)
class(medical.example$age)
class(medical.example$treatment)
?prop.table
rm(list = ls())
#compositional data analysis across age
rm(list = ls())
load('dat.Rdata')
library(compositions)
library(factoextra)
library(data.table)
#data processing
library(tidyverse)
ref = read.csv(paste0(getwd(),'/unrestricted_bcaffo_12_12_2017_12_17_8.csv%3B.csv'), header = T)
colnames(ref)[1] = 'rawid'
#combine with patient info
dat_cor = list()
for(i in 1:4){
dat_cor[[paste0('level',i)]] = left_join(dat[[paste0('level',i)]], ref[,c('rawid','Age','Gender')], by="rawid")
}
#across age
Age = as.character(unique(dat_cor$level1$Age))
Age = sort(Age[!is.na(Age)])
dat_age = list()
for (i in Age){
a = dat_cor$level1 %>% filter(Age == i)
dat_age[[i]] =  a[, !colnames(a) %in% c('rawid','Age','Gender')]
}
res.rotations = list()
for (i in names(dat_age)){
#compositional data
cdata = acomp(dat_age[[i]])
#pca
cdata.pca = prcomp(cdata,scale. = T)
dat_visualization = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','Comp','value')
res.rotations[[i]] = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt() %>% filter(Var2 == 'PC1')
colnames(res.rotations[[i]]) = c('roi','PC','value')
print(
fviz_eig(cdata.pca)
)
print(
ggplot(dat_visualization, aes(x = as.factor(Comp),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'Comp', title = paste('compositional PCA across age',i))
)
}
res.rotations$compile = c()
for (i in names(dat_age)){
res.rotations$compile = rbind(res.rotations$compile, select(res.rotations[[i]],c(roi,value)) %>% mutate(Age = i))
}
ggplot(res.rotations$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC1')
res.rotations
view(res.rotations)
res.rotations$`22-25`
cdata.pca
i
res.rotations$compile
res.rotations$`36+`
dat_age$`36+`
prop.table(dat_age$`36+`,margin = 2)
class(dat_age$`36+`)
prop.table(dat_age$`36+`, margin = 2)
prop.table(as.array(dat_age$`36+`), margin = 2)
apply(dat_age$`36+`,1,function(i) i/sum(i))
t(apply(dat_age$`36+`,1,function(i) i/sum(i)))
t(apply(dat_age$`26-30`,1,function(i) i/sum(i)))
head(t(apply(dat_age$`26-30`,1,function(i) i/sum(i))))
view(prcomp( t(apply(dat_age$`26-30`,1,function(i) i/sum(i))))$rotation)
view(prcomp( t(apply(dat_age$`26-30`,1,function(i) i/sum(i))), scale. = T)$rotation)
cdata.pca$rotation
view(prcomp( t(apply(dat_age$`36+`,1,function(i) i/sum(i))), scale. = T)$rotation)
?prop.table
cdata.pca$rotation
dat_age$`36+`
acomp(dat_age$`36+`)
cdata
res.rotations$`36+`
view(dat_age$`36+`)
view(prop.table(dat_age$`36+`,margin = 2))
cdata
i
res.rotations$`36+`
cdata.pca
cdata
prcomp(cdata,scale. = T)
cdata
prcomp(cdata,scale. = T)
install.packages("compositions")
