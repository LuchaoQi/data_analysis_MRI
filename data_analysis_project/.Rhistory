}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.8,1,0))
rm(y)
view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
# Accuracy ROC/AUC
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
rm(y)
view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
# Accuracy ROC/AUC
}
pr = prediction(y,pca.test$Age)
library(ROCR)
?prediction
library(ROCR)
pr = prediction(y,pca.test$Age)
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
library(ROCR)
pr = prediction(y, pca.test$Age)
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
res.pca$`36+`
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
length(y)
length(pca.train[,1])
length(pca.train[1,])
length(pca.train[,2])
view(pca.train)
length(pca.train[,1])
length(pca.train)
length(pca.train[,PC1])
length(pca.train[1])
sum(trainIdx)
length(trainIdx)
y = predict(model,pca.test,type = 'response')
length(y)
pca.prediction = data.frame(pca.test, prob = y)
view(pca.prediction)
length(ifelse(pca.prediction$prob > 0.7,1,0))
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
view(pca.prediction)
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.8,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
view(dat_cor)
view(dat_cor$level1)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender))
view(pca.score)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age))
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% mutate(Age = dat_cor$level1$Age)
library(compositions)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% mutate(Age = dat_cor$level1$Age)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp()
view(pca.score)
class(pca.score)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% as.data.frame(acomp()) %>% mutate(Age = dat_cor$level1$Age)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
view(pca.scor)
view(pca.score)
rm(pca.score)
dat_pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
rm(dat_pcr)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
pcr.train = dat.pcr[trainIdx]
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat_pcr[!trainIdx]
pcr.test = dat_pcr[!trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
length(pcr.train)
length(pcr.train[,1])
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age) %>%
prcomp()$x
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age) %>%
prcomp()
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
view(dat.pcr_score)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()$x %>% mutate(Age = dat_cor$level1$Age
)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()[[x]] %>% mutate(Age = dat_cor$level1$Age)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
dat.pcr_score = dat.pcr_score$x %>% mutate(Age = dat_cor$level1$Age)
dat.pcr_score = as.data.frame(dat.pcr_score$x) %>% mutate(Age = dat_cor$level1$Age)
view(dat.pcr_score)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
length(y)
mean(y)
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob > 0.7,1,0))
length(pcr.test)
length(pcr.test[,1])
length(pcr.prediction[,1])
length(y)
pcr.prediction = data.frame(pcr.test, prob = y)
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
view(pcr.prediction)
# view(pca.prediction)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
# view(pcr.prediction)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
# view(pcr.prediction)
print(paste'Probability', mean(pcr.prediction$prob))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
?prcomp
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
fviz_eig(dat.pcr)
library(factoextra)
fviz_eig(dat.pcr)
y = predict(model,pcr.test,type = 'response')
length(y)
library(compositions)
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
length(trainIdx)
length(pcr.train[,1])
length(pcr.test[,1])
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
y = predict(model,pcr.test,type = 'response')
length(y)
view(dat.pcr)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
y = predict(model,pcr.test,type = 'response')
class(pcr.test$Age)
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
pcr.prediction = data.frame(pcr.test, prob = y)
view(pcr.prediction)
length(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
length(ifelse(pcr.prediction$prob >= 0.7,1,0))
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
view(pcr.prediction)
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T) %>% fviz_eig()
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T) %>% print(fviz_eig())
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
contrasts(pcr.train$Age)
print(fviz_eig(dat.pcr))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
model = glm(Age~PC1+PC2+PC3.,data = pcr.train,family = binomial())
model = glm(Age~PC1+PC2+PC3,data = pcr.train,family = binomial())
summary(model)
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
model = glm(Age~PC1+PC2,data = pcr.train,family = binomial())
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
view(dat.pcr)
view(dat.pcr$x)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
view(dat.pcr)
view(dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp())
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.75,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
dat.pcr$rotation
dat.pcr$center
dat.pcr$sdev
dat.pcr$scale
dat.pcr$sdev
dat.pcr$sdev[1,2]
dat.pcr$sdev[1-2]
dat.pcr$sdev[1~2]
dat.pcr$sdev[1:2]
sum(dat.pcr$sdev[1:2])
sum(dat.pcr$sdev[1:2])/sum(dat.pcr$sdev)
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
model = glm(Age~PC1+PC2+PC3,data = pcr.train,family = binomial())
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
model = glm(Age~PC1+PC2,data = pcr.train,family = binomial())
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
