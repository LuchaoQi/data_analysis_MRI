}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.8,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(pca.score$all), replace = TRUE, prob = c(.7, .3))
pca.train = pca.score$all[trainIdx]
pca.test = pca.score$all[!trainIdx]
library(tidyverse)
model = glm(Age~.,data = pca.train,family = binomial())
summary(model)
# > contrasts(pca.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pca.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pca.test,type = 'response')
pca.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
# Accuracy ROC/AUC
view(dat_cor)
view(dat_cor$level1)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender))
view(pca.score)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age))
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% mutate(Age = dat_cor$level1$Age)
library(compositions)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% mutate(Age = dat_cor$level1$Age)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp()
view(pca.score)
class(pca.score)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% as.data.frame(acomp()) %>% mutate(Age = dat_cor$level1$Age)
pca.score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
view(pca.scor)
view(pca.score)
rm(pca.score)
dat_pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
rm(dat_pcr)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx]
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
pcr.train = dat.pcr[trainIdx]
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat_pcr[!trainIdx]
pcr.test = dat_pcr[!trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
length(pcr.train)
length(pcr.train[,1])
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age) %>%
prcomp()$x
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% as.data.frame %>% mutate(Age = dat_cor$level1$Age) %>%
prcomp()
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
view(dat.pcr_score)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()$x %>% mutate(Age = dat_cor$level1$Age
)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()[[x]] %>% mutate(Age = dat_cor$level1$Age)
dat.pcr_score = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
dat.pcr_score = dat.pcr_score$x %>% mutate(Age = dat_cor$level1$Age)
dat.pcr_score = as.data.frame(dat.pcr_score$x) %>% mutate(Age = dat_cor$level1$Age)
view(dat.pcr_score)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp()
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
# view(pca.prediction)
print(paste('Accuracy',mean(pca.prediction$fitted.results)))
}
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pca.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
length(y)
mean(y)
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pca.prediction$prob > 0.7,1,0))
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob > 0.7,1,0))
length(pcr.test)
length(pcr.test[,1])
length(pcr.prediction[,1])
length(y)
pcr.prediction = data.frame(pcr.test, prob = y)
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
view(pcr.prediction)
# view(pca.prediction)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
# view(pcr.prediction)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
# view(pcr.prediction)
print(paste'Probability', mean(pcr.prediction$prob))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
?prcomp
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
fviz_eig(dat.pcr)
library(factoextra)
fviz_eig(dat.pcr)
y = predict(model,pcr.test,type = 'response')
length(y)
library(compositions)
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = dat_cor$level1$Age)
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
length(trainIdx)
length(pcr.train[,1])
length(pcr.test[,1])
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
y = predict(model,pcr.test,type = 'response')
length(y)
view(dat.pcr)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~.,data = pcr.train,family = binomial())
summary(model)
y = predict(model,pcr.test,type = 'response')
class(pcr.test$Age)
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
pcr.prediction = data.frame(pcr.test, prob = y)
view(pcr.prediction)
length(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
length(ifelse(pcr.prediction$prob >= 0.7,1,0))
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
view(pcr.prediction)
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T) %>% fviz_eig()
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T) %>% print(fviz_eig())
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
contrasts(pcr.train$Age)
print(fviz_eig(dat.pcr))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
model = glm(Age~PC1+PC2+PC3.,data = pcr.train,family = binomial())
model = glm(Age~PC1+PC2+PC3,data = pcr.train,family = binomial())
summary(model)
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
model = glm(Age~PC1+PC2,data = pcr.train,family = binomial())
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.7,1,0))
# view(pcr.prediction)
print(paste('Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
view(dat.pcr)
view(dat.pcr$x)
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>% prcomp(scale. = T)
print(fviz_eig(dat.pcr))
view(dat.pcr)
view(dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp())
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.75,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
dat.pcr$rotation
dat.pcr$center
dat.pcr$sdev
dat.pcr$scale
dat.pcr$sdev
dat.pcr$sdev[1,2]
dat.pcr$sdev[1-2]
dat.pcr$sdev[1~2]
dat.pcr$sdev[1:2]
sum(dat.pcr$sdev[1:2])
sum(dat.pcr$sdev[1:2])/sum(dat.pcr$sdev)
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
model = glm(Age~PC1+PC2+PC3,data = pcr.train,family = binomial())
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
model = glm(Age~PC1+PC2,data = pcr.train,family = binomial())
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
knitr::opts_chunk$set(message = FALSE)
dat_type1 = raw_dat %>% subject2df() %>% filter(type ==1) %>% fixBasalForebrain()
library(magrittr)
library(magrittr)
dat_type1 = raw_dat %>% subject2df() %>% filter(type ==1) %>% fixBasalForebrain()
library(magrittr)
library(MRIcloudT1volumetrics)
dat_type1 = raw_dat %>% subject2df() %>% filter(type ==1) %>% fixBasalForebrain()
rm(list = ls())
rm(list = ls())
library(tidyverse)
library(MRIcloudT1volumetrics)
roiDir = paste0(getwd(),'/data')
fileList = dir(roiDir)
#type = 1, level = 1
# dat = dat %>% mutate(volume_demean = volume - mean(volume))%>% select(roi,volume_demean)%>% spread(roi,volume_demean)
dat = c()
dat = list()
for (i in 1:length(fileList)){
fullPath = paste(roiDir, fileList[i], sep = "/")
raw_dat = readSubject(fullPath)
dat_type1 = raw_dat %>% subject2df() %>% filter(type ==1) %>% fixBasalForebrain()
# unique(dat_type1$level
for (j in 1:4){
dat_each = dat_type1 %>% filter(level == j) %>% select(rawid,roi,volume) %>% spread(roi,volume)
dat[[paste0('level',j)]] = rbind(dat[[paste0('level',j)]],dat_each)
}
# dat_each = raw_dat %>% filter(type == 1, level == 1) %>% select(roi,volume) %>% spread(roi,volume)
# dat = rbind(dat,dat_each)
}
#extract rawid (integer)
for (j in 1:4){
id = dat[[paste0('level',j)]]$rawid
dat[[paste0('level',j)]]$rawid = as.numeric(sapply(strsplit(id,"_"),function(x) x[1]))
}
#compositional data analysis across age
library(compositions)
library(factoextra)
library(data.table)
#data processing
library(tidyverse)
ref = read.csv(paste0(getwd(),'/unrestricted_bcaffo_12_12_2017_12_17_8.csv%3B.csv'), header = T)
colnames(ref)[1] = 'rawid'
#combine with patient info
dat_cor = list()
for(i in 1:4){
dat_cor[[paste0('level',i)]] = left_join(dat[[paste0('level',i)]], ref[,c('rawid','Age','Gender')], by="rawid")
}
#across age
Age = as.character(unique(dat_cor$level1$Age))
Age = sort(Age[!is.na(Age)])
dat_age = list()
for (i in Age){
a = dat_cor$level1 %>% filter(Age == i)
dat_age[[i]] =  a[, !colnames(a) %in% c('rawid','Age','Gender')]
}
res.rotations = list()
for (i in names(dat_age)){
#compositional data
cdata = acomp(dat_age[[i]])
#pca
cdata.pca = prcomp(cdata,scale. = T)
dat_visualization = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','Comp','value')
res.rotations[[i]] = prop.table(abs(cdata.pca$rotation),margin = 2) %>% melt() %>% filter(Var2 == 'PC1')
colnames(res.rotations[[i]]) = c('roi','PC','value')
print(
fviz_eig(cdata.pca)
)
print(
ggplot(dat_visualization, aes(x = as.factor(Comp),
y = value,
fill = as.factor(roi))
) + geom_col() +theme(legend.title = element_blank()) + labs(x = 'Comp', title = paste('compositional PCA across age',i))
)
}
res.rotations$compile = c()
for (i in names(dat_age)){
res.rotations$compile = rbind(res.rotations$compile, select(res.rotations[[i]],c(roi,value)) %>% mutate(Age = i))
}
ggplot(res.rotations$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC1')
roiDir
readSubject(roiDir)
readSubject(fullPath)
#PCA after getting rid of CSF
library(compositions)
library(factoextra)
dat_age_noCSF = list()
#compositional analysis
for(i in Age){
dat_age_noCSF[[i]] = dat_age[[i]] %>%
select(-CSF) %>% acomp()
}
res.pca = list()
res.rotations_noCSF = list()
for(i in Age){
res.pca[[i]] = prcomp(dat_age_noCSF[[i]],scale. = T)
dat_visualization = prop.table(abs(res.pca[[i]]$rotation),margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','PC','value')
#further work on PC1
res.rotations_noCSF[[i]] = dat_visualization %>% filter(PC == 'PC1')
}
res.rotations_noCSF$compile = c()
for (i in Age){
res.rotations_noCSF$compile = rbind(res.rotations_noCSF$compile,
select(res.rotations_noCSF[[i]],c(roi,value))
%>% mutate(Age = i))
}
ggplot(res.rotations_noCSF$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC1')
# PC2 analysis
for ( i in Age){
dat_visualization = prop.table(abs(res.pca[[i]]$rotation), margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','PC','value')
res.rotations_noCSF[[i]] = dat_visualization %>% filter(PC == 'PC2')
}
res.rotations_noCSF$compile = c()
for (i in Age){
res.rotations_noCSF$compile = rbind(res.rotations_noCSF$compile,
select(res.rotations_noCSF[[i]],c(roi,value))
%>% mutate(Age = i))
}
ggplot(res.rotations_noCSF$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC2')
#PC3
for ( i in Age){
dat_visualization = prop.table(abs(res.pca[[i]]$rotation), margin = 2) %>% melt()
colnames(dat_visualization) = c('roi','PC','value')
res.rotations_noCSF[[i]] = dat_visualization %>% filter(PC == 'PC3')
}
res.rotations_noCSF$compile = c()
for (i in Age){
res.rotations_noCSF$compile = rbind(res.rotations_noCSF$compile,
select(res.rotations_noCSF[[i]],c(roi,value))
%>% mutate(Age = i))
}
ggplot(res.rotations_noCSF$compile, aes(x = Age,y = value,colour = roi,group = roi)) +
geom_line() +
labs(title = 'Compositional analysis: weight of roi in PC3')
#pc-score based regression
library(data.table)
pca.score = list()
for ( i in Age){
pca.score[[i]]= data.frame(res.pca[[i]]$x,Age = as.factor(
rep(i,nrow(res.pca[[i]]$x)))
)
pca.score$all = rbindlist(list(pca.score$all,pca.score[[i]]),fill = TRUE)
}
pca.score$all[is.na(pca.score$all)] = 0
#randomly split
library(compositions)
library(factoextra)
set.seed(100)
trainIdx = sample(c(TRUE, FALSE), nrow(dat_cor$level1), replace = TRUE, prob = c(.7, .3))
dat.pcr = dat_cor$level1 %>% select(-c(rawid,CSF,Gender,Age)) %>% acomp() %>%
prcomp(scale. = T)
print(fviz_eig(dat.pcr))
dat.pcr = as.data.frame(dat.pcr$x) %>% mutate(Age = as.factor(dat_cor$level1$Age))
pcr.train = dat.pcr[trainIdx,]
pcr.test = dat.pcr[!trainIdx,]
library(tidyverse)
model = glm(Age~PC1+PC2,data = pcr.train,family = binomial())
summary(model)
# > contrasts(pcr.train$Age)
#       26-30 31-35 36+
# 22-25     0     0   0
# 26-30     1     0   0
# 31-35     0     1   0
# 36+       0     0   1
if(F){
y = predict(model,pca.test)
pcr.prediction = data.frame(pca.test, prob = exp(y)/(1+exp(y)))
rm(y)
view(pca.prediction)
}
if(T){
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
}
y = predict(model,pcr.test,type = 'response')
pcr.prediction = data.frame(pcr.test, prob = y) %>%
mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
pcr.prediction = data.frame(pcr.test, prob = y)
pcr.prediction = pcr.prediction %>% mutate(fitted.results = ifelse(pcr.prediction$prob >= 0.8,1,0))
# view(pcr.prediction)
print(paste('Mean of Probability', mean(pcr.prediction$prob)))
hist(pcr.prediction$prob)
print(paste('Accuracy',mean(pcr.prediction$fitted.results)))
