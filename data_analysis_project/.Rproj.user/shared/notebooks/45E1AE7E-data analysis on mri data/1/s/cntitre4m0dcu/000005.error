{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pcr(Age ~ ., data = dat_pcr, scale = TRUE, validation = \"CV\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(cl, parent.frame())","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(cl, parent.frame())","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"pls::mvr(Age ~ ., data = dat_pcr, scale = TRUE, validation = \"CV\", \n    method = \"svdpc\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"mvrCv(X, Y, ncomp, Y.add = Y.add, method = method, scale = sdscale, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lapplyFunc(pls.options()$parallel, seq_along(segments), mvrCvSeg)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lapply(X, FUN)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"FUN(X[[i]], ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fitFunc(Xtrain, Y[-seg, , drop = FALSE], ncomp, Y.add = Y.add[-seg, \n    , drop = FALSE], stripped = TRUE, weights = weights[-seg], \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"colMeans(Y)","line_number":0}],"message":"Error in colMeans(Y) : 'x' must be numeric\n"}